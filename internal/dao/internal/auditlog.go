// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AuditlogDao is the data access object for table auditlog.
type AuditlogDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns AuditlogColumns // columns contains all the column names of Table for convenient usage.
}

// AuditlogColumns defines and stores column names for table auditlog.
type AuditlogColumns struct {
	Id           string //
	TraceId      string //
	Username     string //
	Ip           string //
	Path         string //
	Method       string //
	HttpCode     string //
	ResponseTime string //
	CreateAt     string //
}

// auditlogColumns holds the columns for table auditlog.
var auditlogColumns = AuditlogColumns{
	Id:           "id",
	TraceId:      "trace_id",
	Username:     "username",
	Ip:           "ip",
	Path:         "path",
	Method:       "method",
	HttpCode:     "http_code",
	ResponseTime: "response_time",
	CreateAt:     "create_at",
}

// NewAuditlogDao creates and returns a new DAO object for table data access.
func NewAuditlogDao() *AuditlogDao {
	return &AuditlogDao{
		group:   "default",
		table:   "auditlog",
		columns: auditlogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AuditlogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AuditlogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AuditlogDao) Columns() AuditlogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AuditlogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AuditlogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AuditlogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
